generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model check_in {
  id         Int      @id(map: "CheckIn_pkey") @default(autoincrement())
  user_id    Int
  latitude   Float?
  longitude  Float?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  valid      Boolean  @default(false)
  lecture_id Int?
  lecture    lecture? @relation(fields: [lecture_id], references: [id])
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model group {
  id          Int       @id(map: "Group_pkey") @default(autoincrement())
  name        String
  description String?
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  lecture     lecture[]
  user        user[]
}

model lecture {
  id         Int        @id(map: "Lecture_pkey") @default(autoincrement())
  name       String
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @default(now()) @db.Timestamptz(6)
  group_id   Int?
  start_time DateTime   @db.Timestamptz(6)
  check_in   check_in[]
  group      group?     @relation(fields: [group_id], references: [id])
}

model user {
  id         Int        @id(map: "User_pkey") @default(autoincrement())
  name       String?
  password   String?
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @default(now()) @db.Timestamptz(6)
  group_id   Int?
  check_in   check_in[]
  group      group?     @relation(fields: [group_id], references: [id])
}

view lecture_by_date {
  row_id     String    @id @db.Uuid
  lecture_id Int?
  name       String?
  group_id   Int?
  date       String?
  start_time DateTime? @db.Timestamptz(6)
}
